Исследование поведения программы с процессом-родителя и процессом-ребенка, выполняющие разные действия
Цель: выяснить по поведению процессрв, насколько процесс-ребенок независим от процесса-родителья

Исходый код команды:
//ограмма, порождающая дочерный процесс (часть 2).
//процесс-родитель и процесс ребенок должны выполнять разные действия
#include<sys/types.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main() {
        pid_t procid, pprocid;
        int a=0, b;
        procid = getpid();
        pprocid = getppid();
        printf("До вызова fork()\n");
        printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\n", procid, pprocid);
        printf("начальное значение a: %d\n", a);
        b = fork();
        if (b<0) {
                //о время выполнения fork() произошла ошибка. выходим из программы с возвратом кода -1
                printf("Ощибка при выполнении fork()\n");
                exit(-1); //выход из программы
        }
        else if (b==0) {
                printf("\n\nПоявился дочерный процесс получил значение %d\n", b);
                a = a+1; //проверяем изменение значение переменной a
                procid = getpid();
                pprocid = getppid();
                printf("После вызова fork() в процессе-ребенке\n");
                printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\nНовое значенине a: %d\n", procid, pprocid, a);
        }
        else {
                printf("\n\nРодительский процесс после  вызова fork() получил ид.ребенка: %d\n", b);
                a = a+1111; //проверяем изменение значение переменной a
                procid = getpid();
                pprocid = getppid();
                printf("Индентификаторы процесса-родителяе\n");
                printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\nНовое значенине a: %d\n", procid, pprocid, a);
        }
        return 0;
}
Результат выполнения программы:

До вызова fork():
значение переменной a: 0
ид.текущего процесса: 17739
Ид. родителя: 17660


Родительский процесс после  вызова fork() получил ид.ребенка: 17741
Индентификаторы процесса-родителяе
Ид. текущ. процесса: 17739
Ид. род. процесса: 17660
Новое значенине a: 1111


Появился дочерный процесс получил значение 0
После вызова fork() в процессе-ребенке
Ид. текущ. процесса: 17741
Ид. род. процесса: 17739
Новое значенине a: 1

.....
Значение переменной а внутр процесса-ребенка не зависит от значения а внутри процессора-родителя. Из чего можно сделать вывод, что ребенок и родитель выполняется в отдельных адресных пространствах.

Если род. процесса: 1
Для процесса-ребенка родителем оказался процессом с ид. 1, что означает удочерение процесса операционой системой в связи  с тем, что родитель дочери его процесс закончил исполнение раньше, чем мы полуили ид. родителя системным вызовом getpid()
